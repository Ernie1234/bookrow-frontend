/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as AboutRouteImport } from './routes/about'
import { Route as IndexRouteImport } from './routes/index'
import { Route as dashboardDashboardRouteImport } from './routes/(dashboard)/dashboard'
import { Route as authRegisterRouteImport } from './routes/(auth)/register'
import { Route as authNotAuthorizedRouteImport } from './routes/(auth)/not-authorized'
import { Route as authLoginRouteImport } from './routes/(auth)/login'
import { Route as authForgotPasswordRouteImport } from './routes/(auth)/forgot-password'
import { Route as dashboardDashboardFavoritesRouteImport } from './routes/(dashboard)/dashboard.favorites'
import { Route as dashboardDashboardDiscoverRouteImport } from './routes/(dashboard)/dashboard.discover'
import { Route as dashboardDashboardContinueRouteImport } from './routes/(dashboard)/dashboard.continue'

const AboutRoute = AboutRouteImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const dashboardDashboardRoute = dashboardDashboardRouteImport.update({
  id: '/(dashboard)/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRouteImport,
} as any)
const authRegisterRoute = authRegisterRouteImport.update({
  id: '/(auth)/register',
  path: '/register',
  getParentRoute: () => rootRouteImport,
} as any)
const authNotAuthorizedRoute = authNotAuthorizedRouteImport.update({
  id: '/(auth)/not-authorized',
  path: '/not-authorized',
  getParentRoute: () => rootRouteImport,
} as any)
const authLoginRoute = authLoginRouteImport.update({
  id: '/(auth)/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const authForgotPasswordRoute = authForgotPasswordRouteImport.update({
  id: '/(auth)/forgot-password',
  path: '/forgot-password',
  getParentRoute: () => rootRouteImport,
} as any)
const dashboardDashboardFavoritesRoute =
  dashboardDashboardFavoritesRouteImport.update({
    id: '/favorites',
    path: '/favorites',
    getParentRoute: () => dashboardDashboardRoute,
  } as any)
const dashboardDashboardDiscoverRoute =
  dashboardDashboardDiscoverRouteImport.update({
    id: '/discover',
    path: '/discover',
    getParentRoute: () => dashboardDashboardRoute,
  } as any)
const dashboardDashboardContinueRoute =
  dashboardDashboardContinueRouteImport.update({
    id: '/continue',
    path: '/continue',
    getParentRoute: () => dashboardDashboardRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/forgot-password': typeof authForgotPasswordRoute
  '/login': typeof authLoginRoute
  '/not-authorized': typeof authNotAuthorizedRoute
  '/register': typeof authRegisterRoute
  '/dashboard': typeof dashboardDashboardRouteWithChildren
  '/dashboard/continue': typeof dashboardDashboardContinueRoute
  '/dashboard/discover': typeof dashboardDashboardDiscoverRoute
  '/dashboard/favorites': typeof dashboardDashboardFavoritesRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/forgot-password': typeof authForgotPasswordRoute
  '/login': typeof authLoginRoute
  '/not-authorized': typeof authNotAuthorizedRoute
  '/register': typeof authRegisterRoute
  '/dashboard': typeof dashboardDashboardRouteWithChildren
  '/dashboard/continue': typeof dashboardDashboardContinueRoute
  '/dashboard/discover': typeof dashboardDashboardDiscoverRoute
  '/dashboard/favorites': typeof dashboardDashboardFavoritesRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/(auth)/forgot-password': typeof authForgotPasswordRoute
  '/(auth)/login': typeof authLoginRoute
  '/(auth)/not-authorized': typeof authNotAuthorizedRoute
  '/(auth)/register': typeof authRegisterRoute
  '/(dashboard)/dashboard': typeof dashboardDashboardRouteWithChildren
  '/(dashboard)/dashboard/continue': typeof dashboardDashboardContinueRoute
  '/(dashboard)/dashboard/discover': typeof dashboardDashboardDiscoverRoute
  '/(dashboard)/dashboard/favorites': typeof dashboardDashboardFavoritesRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/about'
    | '/forgot-password'
    | '/login'
    | '/not-authorized'
    | '/register'
    | '/dashboard'
    | '/dashboard/continue'
    | '/dashboard/discover'
    | '/dashboard/favorites'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/about'
    | '/forgot-password'
    | '/login'
    | '/not-authorized'
    | '/register'
    | '/dashboard'
    | '/dashboard/continue'
    | '/dashboard/discover'
    | '/dashboard/favorites'
  id:
    | '__root__'
    | '/'
    | '/about'
    | '/(auth)/forgot-password'
    | '/(auth)/login'
    | '/(auth)/not-authorized'
    | '/(auth)/register'
    | '/(dashboard)/dashboard'
    | '/(dashboard)/dashboard/continue'
    | '/(dashboard)/dashboard/discover'
    | '/(dashboard)/dashboard/favorites'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AboutRoute: typeof AboutRoute
  authForgotPasswordRoute: typeof authForgotPasswordRoute
  authLoginRoute: typeof authLoginRoute
  authNotAuthorizedRoute: typeof authNotAuthorizedRoute
  authRegisterRoute: typeof authRegisterRoute
  dashboardDashboardRoute: typeof dashboardDashboardRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(dashboard)/dashboard': {
      id: '/(dashboard)/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof dashboardDashboardRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(auth)/register': {
      id: '/(auth)/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof authRegisterRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(auth)/not-authorized': {
      id: '/(auth)/not-authorized'
      path: '/not-authorized'
      fullPath: '/not-authorized'
      preLoaderRoute: typeof authNotAuthorizedRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(auth)/login': {
      id: '/(auth)/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof authLoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(auth)/forgot-password': {
      id: '/(auth)/forgot-password'
      path: '/forgot-password'
      fullPath: '/forgot-password'
      preLoaderRoute: typeof authForgotPasswordRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(dashboard)/dashboard/favorites': {
      id: '/(dashboard)/dashboard/favorites'
      path: '/favorites'
      fullPath: '/dashboard/favorites'
      preLoaderRoute: typeof dashboardDashboardFavoritesRouteImport
      parentRoute: typeof dashboardDashboardRoute
    }
    '/(dashboard)/dashboard/discover': {
      id: '/(dashboard)/dashboard/discover'
      path: '/discover'
      fullPath: '/dashboard/discover'
      preLoaderRoute: typeof dashboardDashboardDiscoverRouteImport
      parentRoute: typeof dashboardDashboardRoute
    }
    '/(dashboard)/dashboard/continue': {
      id: '/(dashboard)/dashboard/continue'
      path: '/continue'
      fullPath: '/dashboard/continue'
      preLoaderRoute: typeof dashboardDashboardContinueRouteImport
      parentRoute: typeof dashboardDashboardRoute
    }
  }
}

interface dashboardDashboardRouteChildren {
  dashboardDashboardContinueRoute: typeof dashboardDashboardContinueRoute
  dashboardDashboardDiscoverRoute: typeof dashboardDashboardDiscoverRoute
  dashboardDashboardFavoritesRoute: typeof dashboardDashboardFavoritesRoute
}

const dashboardDashboardRouteChildren: dashboardDashboardRouteChildren = {
  dashboardDashboardContinueRoute: dashboardDashboardContinueRoute,
  dashboardDashboardDiscoverRoute: dashboardDashboardDiscoverRoute,
  dashboardDashboardFavoritesRoute: dashboardDashboardFavoritesRoute,
}

const dashboardDashboardRouteWithChildren =
  dashboardDashboardRoute._addFileChildren(dashboardDashboardRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AboutRoute: AboutRoute,
  authForgotPasswordRoute: authForgotPasswordRoute,
  authLoginRoute: authLoginRoute,
  authNotAuthorizedRoute: authNotAuthorizedRoute,
  authRegisterRoute: authRegisterRoute,
  dashboardDashboardRoute: dashboardDashboardRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
